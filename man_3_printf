.\" Automatically generated by Pandoc 2.5
.\"
.TH "_PRINTF ms 1.0" "" "March 2022" "" ""
.hy
.SH _PRINTF _printf \- formatted output conversion
.SH SYNOPSIS
.PP
**_printf** (\f[B]const char\f[R] *format, \&...)
.SH DESCRIPTION
.PP
The function produce output according to a format as described below.
Write output to stdout.
The output is written under the control of a format string that
specifies how subsequent arguments are converted for output.
.SH FORMAT OF THE FORMAT STRING
.PP
The format string is a character string.
Is composed of zero or more directives: ordinary characters (not %), are
copied unchanged to the output stream; and conversion specifications,
each of which results in fetching zero or more subsequent arguments.
Each conversion specification is intro\- duce by the character %, and
ends with a conversion specifier.
.PP
The arguments must correspond properly with the conversion specifier.
Thus,
.IP
.nf
\f[C]
  _printf(\[dq]this is a number %d and another number %d\[dq], num, num);
\f[R]
.fi
.SH CONVERSION SPECIFIERS
.PP
\f[B]d, i\f[R] The int argument is converted to signed decimal notation.
.PP
\f[B]c\f[R] The int argument is converted to an unsigned char, and the
resulting character is written.
.PP
\f[B]s\f[R] The constant char * argument is expected to be a pointer to
an array of characters type.
Characters from the array are written.
.PP
\f[B]r\f[R] The constant char * (pointer to array of characters) is
written in reverse.
.PP
\f[B]%\f[R] A % is written.
No argument is conveerted
.SH RETURN VALUE
.PP
Upon success, the function return the number of characters printed.
.PP
If an error is encountered, a negative value is returned.
.SH BUGS
.PP
it has, but we don\[cq]t know them.
.SH AUTHORS
Manu and Ed.
